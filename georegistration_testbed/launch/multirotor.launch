<?xml version="1.0"?>
<launch>
    <arg name="mav_name"            default="multirotor"/>
    <arg name="color"               default="White"/>
    <arg name="x"                   default="0"/>
    <arg name="y"                   default="0"/>
    <arg name="z"                   default="0.1"/>
    <arg name="yaw"                 default="0"/>
    <arg name="debug"               default="false"/>

    <!-- Start Simulator -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="paused" value="false"/>
        <arg name="gui" value="true"/>
        <arg name="verbose" value="false"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="use_sim_time" value="false"/>
    </include>

    <!-- Spawn Model in Gazebo -->
    <include file="$(find roscopter_sim)/launch/spawn_mav.launch">
        <arg name="mav_name"            value="$(arg mav_name)" />
        <arg name="model"               value="$(find roscopter_sim)/xacro/$(arg mav_name).urdf.xacro" />
        <arg name="x"                   value="$(arg x)"/>
        <arg name="y"                   value="$(arg y)"/>
        <arg name="z"                   value="$(arg z)"/>
        <arg name="yaw"                 value="$(arg yaw)"/>
        <arg name="color"               value="$(arg color)"/>
    </include>

    <!-- Controller -->
    <group ns="$(arg mav_name)">

        <!-- Load common parameters -->
        <rosparam command="load" file="$(find roscopter_sim)/params/$(arg mav_name).yaml"/>

        <!-- Is Flying Publisher -->
        <node pkg="rostopic" type="rostopic" name="is_flying_pub" args="pub is_flying std_msgs/Bool true"/>

        <!-- Status Publisher -->
        <!--<node pkg="rostopic" type="rostopic" name="status_pub" args="pub -r 1 status rosflight_msgs/Status '{armed: true, failsafe: false, rc_override: false, offboard: true, error_code: 0, num_errors: 0, loop_time_us: 1}'"/>-->
        <!--<node pkg="rostopic" type="rostopic" name="status_pub" 
              args="pub status rosflight_msgs/Status '{armed: true, failsafe: false, rc_override: false, offboard: true, error_code: 0, num_errors: 0, loop_time_us: 1}'"
        launch-prefix="bash -c 'sleep 6; $0 $@' "/>-->
              <!-- launch-prefix="bash -c &quot;sleep 6; $0 $@&quot;"-->
        <node pkg="rostopic" type="rostopic" name="status_pub" 
              args="pub -r 1 status rosflight_msgs/Status '{armed: true, failsafe: false, rc_override: true, offboard: true, error_code: 0, num_errors: 0, loop_time_us: 1}'"/> 

        <!-- PID Position Controller -->
        <node name="controller" pkg="roscopter" type="controller" output="screen" launch-prefix="bash -c 'sleep 6; $0 $@'">
            <!-- <remap from="estimate" to="ground_truth/odometry/NED"/> -->
            <remap from="estimate" to="odom"/>
        </node>

        <!-- RC -->
        <node name="rc_joy" pkg="rosflight_utils" type="rc_joy">
            <!--<remap from="RC" to="RC"/>-->
        </node>

        <!-- RC -->
        <node name="rosflight_io" pkg="rosflight" type="rosflight_io">
            <!--<remap from="RC" to="multirotor/RC"/>-->
            <param name="udp" value="true"/>
        </node>

        <node pkg="rosservice" type="rosservice" name="load_control_params" 
              args="call --wait /$(arg mav_name)/param_load_from_file $(find roscopter_sim)/params/$(arg mav_name).yaml" />

        <node pkg="rosservice" type="rosservice" name="calibrate_imu" 
              args="call --wait /$(arg mav_name)/calibrate_imu" />

        <node pkg="rosservice" type="rosservice" name="calibrate_baro" 
              args="call --wait /$(arg mav_name)/calibrate_baro" />

        <!-- Waypoint Manager -->
        <node name="waypoint_manager" pkg="roscopter" type="waypoint_manager.py" output="screen">
            <remap from="waypoint" to="high_level_command"/>
            <!-- <remap from="state" to="ground_truth/odometry/NED"/> -->
            <remap from="state" to="odom"/>
            <!-- <remap from="estimate" to="odom"/> -->
        </node>

        <!--Estimator-->
        <node name="estimator" pkg="roscopter" type="ekf_node" output="screen">
            <param name="param_filename" value="$(find roscopter)/params/ekf.yaml"/>
            <!--Inputs-->
            <remap from="imu" to="imu/data"/>
            <!--<remap from="pose" to="pose"/>-->
            <!-- <remap from="reference" to="ground_truth/odometry/NED_throttled"/> -->
            <remap from="gnss" to="gps/data"/>
            <remap from="baro" to="baro/data"/>
            <!--Outputs-->
            <remap from="is_flying" to="not_for_sim"/>
        </node>

        <!-- plot states -->
        <!--     <node pkg="roscopter" type="states_plotter.py" name="states_plotter" output="screen">
             <param name="time_window" value="10.0"/>
             <remap from="truth" to="ground_truth/odometry/NED"/>
             <remap from="estimate" to="odom" />
           </node>
        -->
        <!-- plot states with commands -->
        <!--     <node pkg="roscopter" type="commands_plotter.py" name="commands_plotter" output="screen">
          <param name="time_window" value="10.0"/>
          <remap from="truth" to="ground_truth/odometry/NED"/>
          <remap from="estimate" to="odom" />
        </node> -->

    </group>

    <!--Throttle ground truth for use in the estimator. Estimator cant handle 1000hz-->
    <node name="truth_throttler" type="throttle" pkg="topic_tools" args="messages /multirotor/ground_truth/odometry/NED 100 /multirotor/ground_truth/odometry/NED_throttled">

    </node>

</launch>
